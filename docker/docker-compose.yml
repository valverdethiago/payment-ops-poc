services:
  sync-manager-db:
    image: mongo
    container_name: sync-manager-db
    hostname: sync-manager-db
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_DATABASE: sync-manager
      MONGODB_DATABASE: sync-manager
    volumes: 
      - sync-manager-data-volume:/data/db
    networks:
      - payment-ops-poc-network

  sync-manager-db-ui:
    image: mongo-express
    container_name: sync-manager-db-ui
    hostname: sync-manager-db-ui
    restart: unless-stopped
    ports:
      - "8880:8081"
    environment:      
      ME_CONFIG_MONGODB_SERVER: sync-manager-db
    links:
      - sync-manager-db
    networks:
      - payment-ops-poc-network

  trio-provider-db:
    image: mongo
    container_name: trio-provider-db
    hostname: trio-provider-db
    restart: unless-stopped
    ports:
      - "27018:27017"
    environment:
      MONGO_INITDB_DATABASE: trio_provider
      MONGODB_DATABASE: trio_provider
    volumes:
      - trio-provider-data-volume:/data/db
    networks:
      - payment-ops-poc-network

  trio-provider-db-ui:
    image: mongo-express
    container_name: trio-provider-db-ui
    hostname: trio-provider-db-ui
    restart: unless-stopped
    ports:
      - "8881:8081"
    environment:
      ME_CONFIG_MONGODB_SERVER: trio-provider-db
    links:
      - trio-provider-db
    networks:
      - payment-ops-poc-network

  bank-transactional-db:
    image: postgres:10-alpine
    container_name: bank-transactional-db
    hostname: bank-transactional-db
    restart: unless-stopped
    ports:
      - '5432:5432'
    volumes:
        - bank-transactional-data-volume:/var/lib/postgresql
    environment:
      POSTGRES_DB: bank_transactional_db
      POSTGRES_USER: 'postgres'
      POSTGRES_PASSWORD: 'postgres'
    networks:
      - payment-ops-poc-network

  bank-transactional-ui:
    image: dpage/pgadmin4
    container_name: bank-transactional-ui
    hostname: bank-transactional-ui
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: "thiago@pauca.co"
      PGADMIN_DEFAULT_PASSWORD: "Pauca!2022"
    ports:
      - "9001:80"
    volumes:
      - bank-transactional-data-ui-volume:/var/lib/pgadmin
    links:
      - bank-transactional-db
    networks:
      - payment-ops-poc-network

  zoo:
    image: zookeeper:3.4.9
    restart: unless-stopped
    hostname: zoo
    container_name: zoo
    ports:
      - "2181:2181"
    environment:
      ZOO_MY_ID: 1
      ZOO_PORT: 2181
      ZOO_SERVERS: server.1=zoo:2888:3888
    volumes:
      - zoo-data-volume:/data
      - zoo-datalog-volume:/datalog
    networks:
      - payment-ops-poc-network

  kafka:
    image: confluentinc/cp-kafka:5.3.1
    restart: unless-stopped
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka:19092,LISTENER_DOCKER_EXTERNAL://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - kafka-volume:/var/lib/kafka/data
    depends_on:
      - zoo
    networks:
      - payment-ops-poc-network

  # This "container" is a workaround to pre-create topics
  kafka-setup:
    image: confluentinc/cp-kafka:5.3.1
    hostname: kafka-setup
    container_name: kafka-setup
    depends_on:
      - kafka
      - zoo
    volumes:
      - kafka-setup-connectors-volume:/tmp/connectors
      - kafka-setup-dashboard-volume:/tmp/dashboard
    command: "bash -c 'echo Waiting for Kafka to be ready... && \
                       cub kafka-ready -b kafka:19092 1 20 && \
                       kafka-topics --create --if-not-exists --zookeeper zoo:2181 --partitions 1 --replication-factor 1 --topic SYNC_REQUESTS_INPUT   && \
                       kafka-topics --create --if-not-exists --zookeeper zoo:2181 --partitions 1 --replication-factor 1 --topic SYNC_REQUESTS_OUTPUT  && \
                       kafka-topics --create --if-not-exists --zookeeper zoo:2181 --partitions 1 --replication-factor 1 --topic TRIO_SYNC_REQUEST_INPUT && \
                       kafka-topics --create --if-not-exists --zookeeper zoo:2181 --partitions 1 --replication-factor 1 --topic BALANCE_UPDATE && \
                       kafka-topics --create --if-not-exists --zookeeper zoo:2181 --partitions 1 --replication-factor 1 --topic TRANSACTIONS_UPDATE' "


    environment:
      # The following settings are listed here only to satisfy the image's requirements.
      # We override the image's `command` anyway, hence this container will not start a broker.
      KAFKA_BROKER_ID: ignored
      KAFKA_ZOOKEEPER_CONNECT: ignored
    networks:
      - payment-ops-poc-network

  kafka-ui:
    image: obsidiandynamics/kafdrop
    restart: unless-stopped
    hostname: kafka-ui
    container_name: kafka-ui
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: kafka:19092
    depends_on:
      - kafka
      - zoo
    networks:
      - payment-ops-poc-network

volumes:
  kafka-volume:
    external: false
  zoo-data-volume:
    external: false
  zoo-datalog-volume:
    external: false
  kafka-setup-connectors-volume:
    external: false
  kafka-setup-dashboard-volume:
    external: false
  sync-manager-data-volume:
    external: false
  bank-transactional-data-volume:
    external: false
  bank-transactional-data-ui-volume:
    external: false
  trio-provider-data-volume:
    external: false


networks: 
    payment-ops-poc-network:
      driver: bridge