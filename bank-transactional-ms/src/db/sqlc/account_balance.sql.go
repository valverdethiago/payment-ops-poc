// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: account_balance.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const findAllBalancesByAccount = `-- name: FindAllBalancesByAccount :many
select balance.account_balance_uuid, balance.account_uuid, balance.amount, balance.currency, balance.date_time
from account_balance as balance
where balance.account_uuid = $1
order by balance.date_time desc
`

func (q *Queries) FindAllBalancesByAccount(ctx context.Context, accountUuid uuid.UUID) ([]AccountBalance, error) {
	rows, err := q.db.QueryContext(ctx, findAllBalancesByAccount, accountUuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AccountBalance
	for rows.Next() {
		var i AccountBalance
		if err := rows.Scan(
			&i.AccountBalanceUuid,
			&i.AccountUuid,
			&i.Amount,
			&i.Currency,
			&i.DateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findCurrentBalanceByAccount = `-- name: FindCurrentBalanceByAccount :one
  select balance.account_balance_uuid, balance.account_uuid, balance.amount, balance.currency, balance.date_time
    from account_balance as balance
   where balance.account_uuid = $1
order by balance.date_time desc
   limit 1
`

func (q *Queries) FindCurrentBalanceByAccount(ctx context.Context, accountUuid uuid.UUID) (AccountBalance, error) {
	row := q.db.QueryRowContext(ctx, findCurrentBalanceByAccount, accountUuid)
	var i AccountBalance
	err := row.Scan(
		&i.AccountBalanceUuid,
		&i.AccountUuid,
		&i.Amount,
		&i.Currency,
		&i.DateTime,
	)
	return i, err
}

const updateAccountBalance = `-- name: UpdateAccountBalance :one
INSERT INTO account_balance (account_uuid, amount, currency)
      VALUES ($1, $2, $3)
RETURNING account_balance_uuid, account_uuid, amount, currency, date_time
`

type UpdateAccountBalanceParams struct {
	AccountUuid uuid.UUID `json:"account_uuid"`
	Amount      float64   `json:"amount"`
	Currency    string    `json:"currency"`
}

func (q *Queries) UpdateAccountBalance(ctx context.Context, arg UpdateAccountBalanceParams) (AccountBalance, error) {
	row := q.db.QueryRowContext(ctx, updateAccountBalance, arg.AccountUuid, arg.Amount, arg.Currency)
	var i AccountBalance
	err := row.Scan(
		&i.AccountBalanceUuid,
		&i.AccountUuid,
		&i.Amount,
		&i.Currency,
		&i.DateTime,
	)
	return i, err
}
