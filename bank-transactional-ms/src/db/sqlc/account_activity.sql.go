// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: account_activity.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const findAccountStatuses = `-- name: FindAccountStatuses :one
  select activity.activity_type = 'ENABLED' as IS_ENABLED, 
         activity.activity_type = 'DISABLED' as IS_DISABLED,
         activity.activity_type = 'INVALIDATED' as IS_INVALIDATED
    from account_activity as activity 
   where activity.account_uuid = $1
order by activity.date_time desc
  limit 1
`

type FindAccountStatusesRow struct {
	IsEnabled     bool `json:"is_enabled"`
	IsDisabled    bool `json:"is_disabled"`
	IsInvalidated bool `json:"is_invalidated"`
}

func (q *Queries) FindAccountStatuses(ctx context.Context, accountUuid uuid.UUID) (FindAccountStatusesRow, error) {
	row := q.db.QueryRowContext(ctx, findAccountStatuses, accountUuid)
	var i FindAccountStatusesRow
	err := row.Scan(&i.IsEnabled, &i.IsDisabled, &i.IsInvalidated)
	return i, err
}

const findLastActivityByAccount = `-- name: FindLastActivityByAccount :one
  select activity.account_activity_uuid, activity.account_uuid, activity.activity_type, activity.date_time
    from account_activity as activity 
   where activity.account_uuid = $1  
order by activity.date_time desc
   limit 1
`

func (q *Queries) FindLastActivityByAccount(ctx context.Context, accountUuid uuid.UUID) (AccountActivity, error) {
	row := q.db.QueryRowContext(ctx, findLastActivityByAccount, accountUuid)
	var i AccountActivity
	err := row.Scan(
		&i.AccountActivityUuid,
		&i.AccountUuid,
		&i.ActivityType,
		&i.DateTime,
	)
	return i, err
}
